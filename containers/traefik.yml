---
- name: "{{ item }} / create directories"
  file:
    state: directory
    path: "{{ dir }}"
  loop:
    - "{{ dockers_dir }}/{{ item }}"
    - "{{ dockers_dir }}/{{ item }}/certs"
  loop_control:
    loop_var: dir

- name: "{{ item }} / create network"
  docker_network:
    name: traefik
    state: present
    driver: bridge
    internal: false

- name: "{{ item }} / add certs"
  register: traefik_certs
  copy:
    src: "{{ pem }}.pem"
    dest: "{{ dockers_dir }}/{{ item }}/certs/{{ pem }}.pem"
  loop:
    - cert
    - key
  loop_control:
    loop_var: pem

- name: "{{ item }} / add config"
  register: traefik_config
  copy:
    dest: "{{ dockers_dir }}/{{ item }}/traefik.yml"
    content: |
      entryPoints:
        http:
          address: ":80"
          forwardedHeaders:
            insecure: true
        https:
          address: ":443"
          forwardedHeaders:
            insecure: true
      experimental:
        plugins:
          traefik-wol:
            moduleName: github.com/MarkusJx/traefik-wol
            version: v0.1.1
      api:
        dashboard: true
      log:
        level: DEBUG
      # accessLog:
      #   fields:
      #     headers:
      #       defaultMode: keep
      serversTransport:
        insecureSkipVerify: true
      providers:
        docker:
          defaultRule: Host(`{% raw %}{{ .Name }}{% endraw %}.{{ inventory_hostname }}`)
          exposedByDefault: false
          network: traefik
        file:
          filename: /etc/traefik/file_provider.yml

- name: "{{ item }} / add file provider"
  register: traefik_file_provider
  copy:
    dest: "{{ dockers_dir }}/{{ item }}/file_provider.yml"
    content: |
      tls:
        certificates:
          - certFile: /etc/traefik/certs/cert.pem
            keyFile: /etc/traefik/certs/key.pem

      http:
        routers:
          homebridge:
            rule: Host(`homebridge.{{ inventory_hostname }}`)
            service: homebridge
          glances:
            rule: Host(`glances.{{ inventory_hostname }}`)
            service: glances
          node-red:
            rule: Host(`node-red.{{ inventory_hostname }}`) || Host(`api.{{ inventory_hostname }}`)
            service: node-red
          redis:
            rule: Host(`redis.{{ inventory_hostname }}`)
            service: redis
          mainsail:
            rule: Host(`mainsail.{{ inventory_hostname }}`)
            service: mainsail
            middlewares:
              - turn-on-printer

        services:
          homebridge:
            loadBalancer:
              servers:
                - url: http://{{ inventory_hostname }}:8581
          glances:
            loadBalancer:
              servers:
                - url: http://{{ inventory_hostname }}:61208
          node-red:
            loadBalancer:
              servers:
                - url: http://{{ inventory_hostname }}:1880
          redis:
            loadBalancer:
              servers:
                - url: http://{{ inventory_hostname }}:8001
          mainsail:
            loadBalancer:
              servers:
                - url: http://{{ MAINSAIL_IP }}

        middlewares:
          turn-on-printer:
            plugin:
              traefik-wol:
                healthCheck: http://{{ MAINSAIL_IP }}/printer/info
                startUrl: http://api.home.lab/events?topic=printer/turn-on

- name: "{{ item }} / deploy"
  docker_container:
    name: "{{ item }}"
    state: started
    image: traefik
    restart_policy: unless-stopped
    restart: "{{ traefik_config.changed | default(false) or traefik_file_provider.changed | default(false) }}"
    user: "0"
    networks:
      - name: traefik
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "{{ dockers_dir }}/{{ item }}/:/etc/traefik"
    labels:
      traefik.enable: "true"
      traefik.http.routers.dashboard.service: api@internal

      homepage.group: services
      homepage.name: "{{ item }}"
      homepage.icon: "{{ item }}"
      homepage.href: http://{{ item }}.{{ inventory_hostname }}
    ports:
      - 80:80
      - 443:443
