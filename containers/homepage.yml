- name: "{{ item }} / create directories"
  file:
    state: directory
    path: "{{ dir }}"
  loop:
    - "{{ dockers_dir }}/{{ item }}"
  loop_control:
    loop_var: dir

- name: "{{ item }} / add settings.yaml"
  copy:
    dest: "{{ dockers_dir }}/{{ item }}/settings.yaml"
    content: |
      title: {{ inventory_hostname }}
      color: gray

      layout:
        widgets:
          header: false
        services:
          header: false

      hideVersion: true
      statusStyle: dot
      headerStyle: clean

- name: "{{ item }} / add docker.yaml"
  copy:
    dest: "{{ dockers_dir }}/{{ item }}/docker.yaml"
    content: |
      my-docker:
        socket: /var/run/docker.sock

- name: "{{ item }} / add widgets.yaml"
  copy:
    dest: "{{ dockers_dir }}/{{ item }}/widgets.yaml"
    content: |
      - greeting:
          text_size: xl
          text: :~)

      - search:
          provider: custom
          url: q=

- name: "{{ item }} / add services.yaml"
  copy:
    dest: "{{ dockers_dir }}/{{ item }}/services.yaml"
    content: |
        - widgets:
          - mainsail:
              weight: 100
              icon: mainsail.svg
              href: http://mainsail.{{ inventory_hostname }}
              widget:
                type: moonraker
                url: http://{{ MAINSAIL_IP }}:7125
                fields: ["print_status", "print_progress"]
                hideErrors: true

- name: "{{ item }} / add bookmarks.yaml"
  copy:
    dest: "{{ dockers_dir }}/{{ item }}/bookmarks.yaml"
    content: ""

- name: "{{ item }} / add custom.css"
  copy:
    dest: "{{ dockers_dir }}/{{ item }}/custom.css"
    content: |
      #footer {
        display: none;
      }

      #information-widgets {
        margin-top: 1.5rem
      }

      #information-widgets .information-widget-search {
        margin-left: 0.25rem;
        margin-right: 0.25rem;
      }

      #information-widgets-right {
        margin-left: 0;
      }

      #information-widgets .information-widget-search > .flex-col {
        margin-top: 0;
        margin-bottom: 0;
        height: 2.5rem;
      }

      #information-widgets .information-widget-search > .flex-col > .text-left {
        display: none;
      }

      #information-widgets .information-widget-search > .flex-col > input {
        font-family: arial;
        font-size: .875rem
      }

      #information-widgets .information-widget-search > .flex-col > input::placeholder {
        color: hsla(0,0%,100%,.4)
      }

      .services-group:first-child .service:last-child > div {
        margin-bottom: 0.25rem;
      }

- name: "{{ item }} / add custom.js"
  copy:
    dest: "{{ dockers_dir }}/{{ item }}/custom.js"
    content: |
      let searchpageIframe;

      const addIframe = (q) => {
        searchpageIframe = document.createElement("iframe");

        searchpageIframe.width = "100%";
        searchpageIframe.height = "100%";
        searchpageIframe.src = "http://searchpage.{{ inventory_hostname }}/?iframe=true&" + q;
        searchpageIframe.style.border = "none";
        searchpageIframe.style.position = "fixed";
        searchpageIframe.style.top = "0";
        searchpageIframe.style.backgroundColor = "rgb(31,41,55)"
        searchpageIframe.style.left = "0";

        document.body.appendChild(searchpageIframe);
      };

      const removeIframe = () => {
        document.body.removeChild(searchpageIframe);
      };

      window.addEventListener("message", (event) => {
        if (event.data.type == "close") {
          removeIframe();
        }
      }, false);

      const originalOpen = window.open;

      window.open = (link) => {
        const tmp = document.createElement("input");
        document.body.appendChild(tmp);
        tmp.focus();
        document.body.removeChild(tmp);

        if (link.includes('q=')) {
          addIframe(link);
        } else {
          originalOpen(link);
        }
      };

- name: "{{ item }} / deploy"
  docker_container:
    state: started
    name: "{{ item }}"
    image: ghcr.io/gethomepage/homepage
    restart_policy: unless-stopped
    networks: 
      - name: traefik
    user: "0"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "{{ dockers_dir }}/{{ item }}:/config"
    labels:
      traefik.enable: "true"
      traefik.http.routers.homepage.rule: "Host(`{{ inventory_hostname }}`)"